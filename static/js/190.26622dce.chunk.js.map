{"version":3,"file":"static/js/190.26622dce.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Contact/Contact.styles.js","components/Contact/Contact.js","components/ContactList/ContactList.styles.js","components/ContactList/ContactList.js","components/Form/Form.styles.js","components/Form/Form.js","components/Filter/Filter.styles.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["export const getFilterValue = state => state.filter;\nexport const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n","import styled from '@emotion/styled';\nexport const ContactInfo = styled.p`\n  width: 50%;\n`;\n\nexport const ContactListButton = styled.button`\n  background-color: #d64848;\n  color: white;\n  padding: 12px;\n  margin: 10px 0;\n  border: none;\n\n  border-radius: 3px;\n  cursor: pointer;\n  font-size: 17px;\n  transition: background-color 250ms linear;\n\n  :hover {\n    background-color: #af3939;\n  }\n`;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport propTypes from 'prop-types';\nimport { HiOutlineUser, HiMinusCircle } from 'react-icons/hi';\nimport { ContactInfo, ContactListButton } from './Contact.styles';\n\nimport { deleteContact } from 'redux/contacts/operations';\n\nconst Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  const onDeleteContant = () => {\n    dispatch(deleteContact(contact.id));\n  };\n\n  return (\n    <>\n      {<HiOutlineUser />}\n      <ContactInfo>\n        {contact.name}\n        <br /> {contact.number}\n      </ContactInfo>\n\n      <ContactListButton type=\"button\" onClick={onDeleteContant}>\n        Delete {<HiMinusCircle />}\n      </ContactListButton>\n    </>\n  );\n};\nContact.propTypes = {\n  contact: propTypes.object,\n};\n\nexport default Contact;\n","import styled from '@emotion/styled';\n\nexport const ContactItems = styled.ul`\n  list-style: none;\n  padding: 5px;\n  font-size: 1.1em;\n`;\n\nexport const ContactItem = styled.li`\n  margin: 5px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n","import { useSelector } from 'react-redux';\nimport { getContacts, getFilterValue } from 'redux/contacts/selectors';\n\nimport Contact from '../Contact/Contact';\n\nimport { ContactItems, ContactItem } from './ContactList.styles';\n\nexport function ContactList() {\n  const filter = useSelector(getFilterValue);\n  const contacts = useSelector(getContacts);\n\n  function filterContacts() {\n    if (contacts.length !== 0) {\n      const normalizeFilter = filter.toLowerCase().trim();\n\n      const allContacts = contacts.filter(contact =>\n        contact.name.toLowerCase().includes(normalizeFilter)\n      );\n\n      const inAlphabetContact = [\n        ...allContacts.sort((firstContact, secondContact) =>\n          firstContact.name.localeCompare(secondContact.name)\n        ),\n      ];\n\n      return inAlphabetContact;\n    }\n  }\n  return (\n    <ContactItems>\n      {!filterContacts()\n        ? 'contacts missing'\n        : filterContacts().map(contact => (\n            <ContactItem key={contact.id}>\n              <Contact contact={contact} />\n            </ContactItem>\n          ))}\n    </ContactItems>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const ContactForms = styled.form`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ContactInput = styled.input`\n  width: 100%;\n  margin-bottom: 20px;\n  padding: 12px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n`;\n\nexport const ContactLabel = styled.label`\n  margin-bottom: 10px;\n  display: block;\n`;\n\nexport const ContactFormsButton = styled.button`\n  background-color: #04aa6d;\n  color: white;\n  padding: 12px;\n  margin: 10px 0;\n  border: none;\n  width: 100%;\n  border-radius: 3px;\n  cursor: pointer;\n  font-size: 17px;\n  transition: background-color 250ms linear;\n\n  :hover {\n    background-color: #3f7241;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\n\nimport {\n  ContactForms,\n  ContactInput,\n  ContactLabel,\n  ContactFormsButton,\n} from './Form.styles';\n\nexport default function Form() {\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n\n    dispatch(addContact({ name, number }));\n    form.reset();\n  };\n\n  return (\n    <ContactForms onSubmit={handleSubmit}>\n      <ContactLabel>\n        Name:\n        <ContactInput\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          autoComplete=\"off\"\n          autoFocus=\"on\"\n        />\n      </ContactLabel>\n      <ContactLabel>\n        Number\n        <ContactInput\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          autoComplete=\"off\"\n        />\n      </ContactLabel>\n      <ContactFormsButton type=\"submit\"> Add contact</ContactFormsButton>\n    </ContactForms>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const ContactInput = styled.input`\n  width: 100%;\n  margin-bottom: 20px;\n  padding: 12px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n`;\n\nexport const ContactLabel = styled.label`\n  margin-bottom: 10px;\n  display: block;\n`;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilterValue } from 'redux/contacts/selectors';\nimport { filterContacts } from 'redux/contacts/filterSlice';\n\nimport { ContactInput, ContactLabel } from './Filter.styles';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilterValue);\n\n  const changeFilterHandler = ({ target: { value } }) => {\n    dispatch(filterContacts(value));\n  };\n\n  return (\n    <ContactLabel>\n      Find contacts by name\n      <ContactInput\n        type=\"text\"\n        name=\"search\"\n        autoComplete=\"off\"\n        value={filter}\n        onChange={changeFilterHandler}\n      />\n    </ContactLabel>\n  );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport Form from 'components/Form';\nimport Filter from 'components/Filter';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { getError, getIsLoading } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Form />\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactList />\n    </>\n  );\n}\n"],"names":["getFilterValue","state","filter","getContacts","contacts","items","getIsLoading","isLoading","getError","error","ContactInfo","styled","ContactListButton","contact","dispatch","useDispatch","name","number","type","onClick","deleteContact","id","ContactItems","ContactItem","ContactList","useSelector","filterContacts","length","normalizeFilter","toLowerCase","trim","allContacts","includes","sort","firstContact","secondContact","localeCompare","map","ContactForms","ContactInput","ContactLabel","ContactFormsButton","Form","onSubmit","event","preventDefault","form","target","elements","value","addContact","reset","pattern","title","required","autoComplete","autoFocus","onChange","Contacts","useEffect","fetchContacts"],"sourceRoot":""}